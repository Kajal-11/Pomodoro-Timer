{"version":3,"sources":["components/BreakInterval.js","components/SessionLength.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","className","onClick","breakInterval","onIncrease","onDecrease","SessionLength","sessionInterval","Timer","state","timerSecond","timer","onRefresh","bind","startTimer","stopTimer","this","onRefreshSession","setState","isRunning","isRunningToggle","setInterval","prev","clearInterval","timerMinute","timerUpdate","toggleSession","isSession","React","Component","App","breakLength","sessionLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","breaklength","sessionlength","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5698f4fc.chunk.js","sourcesContent":["import React from 'react'\n\nfunction BreakInterval(props){\n    \n    function breakUp() {\n        if(props.breakInterval === 59)\n            return\n        props.onIncrease()\n    }\n    \n    function breakDown() {\n        if(props.breakInterval === 1)\n            return\n        props.onDecrease()\n    }\n    \n    return(\n        <section className='intervalLength'>\n            <h2>Break Length</h2>\n            <button className='fa fa-sort-asc' onClick={breakUp}></button>\n            <p>{props.breakInterval}</p>\n            <button className='fa fa-sort-desc' onClick={breakDown}></button>\n        </section>\n    )\n}\n\nexport default BreakInterval","import React from 'react'\n\nfunction SessionLength(props){\n    function sessionUp() {\n        if(props.sessionInterval === 59)\n            return;\n        props.onIncrease()\n    }\n    function sessionDown() {\n        if(props.sessionInterval === 1)\n            return;\n        props.onDecrease()\n    }\n    return(\n        <section className='intervalLength'>\n            <h2>Session Length</h2>\n            <button className='fa fa-sort-asc' onClick={sessionUp}></button>\n            <p>{props.sessionInterval}</p>\n            <button className='fa fa-sort-desc' onClick={sessionDown}></button>\n        </section>\n    )\n}\n\nexport default SessionLength","import React from 'react'\n\nclass Timer extends React.Component{\n    constructor(){\n        super()\n\n        this.state = {\n            timerSecond: 0,\n            timer: 0\n        }\n        this.onRefresh = this.onRefresh.bind(this)\n        this.startTimer = this.startTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n        this.timer = this.timer.bind(this)\n    }\n\n    onRefresh(){\n        this.stopTimer()\n        this.props.onRefreshSession()\n        this.setState({\n            timerSecond: 0\n        })\n    }\n\n    startTimer(){\n        if(this.props.isRunning)\n            return                       //If the timer is already running, no action\n\n        this.props.isRunningToggle()\n\n        this.setState({\n            timer: setInterval(this.timer, 1000)\n        }) \n    }\n\n    stopTimer(){\n        if(this.props.isRunning){\n            this.setState(prev =>({\n            timer: clearInterval(prev.timer),\n            }))\n            this.props.isRunningToggle()\n        }    \n    }\n\n    timer(){\n        this.setState(prev => {\n            if(prev.timerSecond)\n              return{\n                  timerSecond: prev.timerSecond - 1\n              }  \n            else if(this.props.timerMinute){\n              this.props.timerUpdate()\n              this.setState({\n                  timerSecond: 59,\n              })\n            }\n            else if (true){\n              this.props.toggleSession()\n            }\n        }\n        )\n    }\n\n    render(){\n        return(\n            <section className='timer'>\n                <section className='clock'>\n                    <h2>{this.props.isSession ? \"Session\" : \"Break\"} Timer</h2>\n                    <div>\n                        <span>{this.props.timerMinute === 0 ? \"00\" : this.props.timerMinute < 10 ? \"0\" + this.props.timerMinute : this.props.timerMinute}</span>\n                        <span> : </span>\n                        <span>{this.state.timerSecond === 0 ? \"00\" : this.state.timerSecond < 10 ? \"0\" + this.state.timerSecond : this.state.timerSecond}</span>\n                    </div>\n                </section>\n                <section className='funcButtons'>\n                    <button onClick={this.startTimer}>Play</button>\n                    <button onClick={this.stopTimer}>Stop</button>\n                    <button onClick={this.onRefresh}>Refresh</button>\n                </section>\n            </section>\n        )\n    }\n}\n\nexport default Timer","import React from 'react';\nimport '../App.css';\nimport BreakInterval from './BreakInterval'\nimport SessionLength from './SessionLength'\nimport Timer from './Timer'\n\nclass App extends React.Component {\n  constructor(){\n    super()\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25,\n      isRunning: false,\n      isSession: true\n    }\n\n    this.onIncreaseBreakLength    = this.onIncreaseBreakLength.bind(this)\n    this.onDecreaseBreakLength    = this.onDecreaseBreakLength.bind(this)\n    this.onIncreaseSessionLength  = this.onIncreaseSessionLength.bind(this)\n    this.onDecreaseSessionLength  = this.onDecreaseSessionLength.bind(this)\n    this.onRefreshSession         = this.onRefreshSession.bind(this)\n    this.timerUpdate              = this.timerUpdate.bind(this)\n    // this.updateTimer              = this.updateTimer.bind(this)\n    this.isRunningToggle          = this.isRunningToggle.bind(this)\n    this.toggleSession            = this.toggleSession.bind(this)\n  }\n\n  onIncreaseBreakLength(){\n    if(this.state.isRunning)\n      return\n    let breaklength = this.state.breakLength + 1\n    this.setState({\n        breakLength: breaklength,\n    })\n  }\n\n  onDecreaseBreakLength(){\n    if(this.state.isRunning)\n      return\n    let breaklength = this.state.breakLength - 1\n    this.setState({\n        breakLength: breaklength,\n    })\n  }\n\n  onIncreaseSessionLength(){\n    if(this.state.isRunning)\n      return\n    let sessionlength = this.state.sessionLength + 1\n    this.setState({\n        sessionLength: sessionlength,\n        timerMinute: sessionlength\n    })\n  }\n\n  onDecreaseSessionLength(){\n    if(this.state.isRunning)\n      return\n    let sessionlength = this.state.sessionLength - 1\n    this.setState({\n        sessionLength: sessionlength,\n        timerMinute: sessionlength\n    })\n  }\n\n  onRefreshSession(){\n    this.setState({\n      timerMinute: this.state.sessionLength,  \n      isSession: true\n    })\n  }\n\n  timerUpdate(){\n    this.setState(prev =>{\n      return{\n        timerMinute: prev.timerMinute - 1\n      }\n    })\n  }\n\n  // updateTimer(length){\n  //   if(this.state.isSession)\n  //     this.setState({\n  //         timerMinute: length\n  //     })\n\n  //   else if(!this.state.isSession)\n  //   this.setState({\n  //       timerMinute: this.state.breakLength\n  //   })\n  // }\n  \n  isRunningToggle(){\n    this.setState(prev =>({\n      isRunning: !prev.isRunning\n    })\n    )\n  }\n\n  toggleSession(){\n    if(!this.state.isSession)\n      this.setState({\n        timerMinute: this.state.sessionLength,  \n        isSession: true\n      })\n    else\n      this.setState({\n        timerMinute: this.state.breakLength,  \n        isSession: false,\n      })\n  }\n\n  render(){\n    return (\n      <main>\n        <h1 className=\"title\">Pomodoro Clock</h1>\n        <div className=\"interval\">\n          <BreakInterval \n            breakInterval = {this.state.breakLength}\n            onIncrease = {this.onIncreaseBreakLength}\n            onDecrease = {this.onDecreaseBreakLength} />\n          <SessionLength \n            sessionInterval = {this.state.sessionLength}\n            onIncrease = {this.onIncreaseSessionLength}\n            onDecrease = {this.onDecreaseSessionLength} />\n        </div>\n        <Timer \n          timerMinute = {this.state.timerMinute}\n          onRefreshSession = {this.onRefreshSession}\n          timerUpdate = {this.timerUpdate}\n          isRunning = {this.state.isRunning}\n          isRunningToggle = {this.isRunningToggle}\n          isSession = {this.state.isSession}\n          toggleSession = {this.toggleSession} />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}